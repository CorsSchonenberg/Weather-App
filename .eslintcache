[{"C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\index.js":"1","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\App.js":"2","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\Api.js":"3","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\UI\\LoadingSpinner.js":"4","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\search\\Search.js":"5","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\forecast\\Forecast.js":"6","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\current-weather\\Current-weather.js":"7"},{"size":207,"mtime":1666969090975,"results":"8","hashOfConfig":"9"},{"size":5091,"mtime":1669896314206,"results":"10","hashOfConfig":"9"},{"size":424,"mtime":1666877815711,"results":"11","hashOfConfig":"9"},{"size":174,"mtime":1667918484001,"results":"12","hashOfConfig":"9"},{"size":1239,"mtime":1667941821837,"results":"13","hashOfConfig":"9"},{"size":2964,"mtime":1669900334011,"results":"14","hashOfConfig":"9"},{"size":1686,"mtime":1666885338659,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"p6jejp",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\index.js",[],["33","34"],"C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\App.js",["35","36","37","38"],"import Search from \"./components/search/Search\";\nimport CurrentWeather from \"./components/current-weather/Current-weather\";\nimport classes from \"./App.module.css\";\nimport {WEATHER_API_URL, WEATHER_API_KEY} from \"./Api\";\nimport React, {useState, useEffect, useContext} from \"react\";\nimport Forecast from \"./components/forecast/Forecast\";\nimport LoadingSpinner from \"./components/UI/LoadingSpinner\";\n\nconst backgrounds = {\n    \"01d\": classes.sunnyday,\n    \"02d\": classes.sunnyday,\n    \"03d\": classes.cloudyday,\n    \"04d\": classes.cloudyday,\n    \"09d\": classes.rainyday,\n    \"10d\": classes.rainyday,\n    \"11d\": classes.stormyday,\n    \"13d\": classes.snowyday,\n    \"50d\": classes.foggyday,\n    \"01n\": classes.cloudlessnight,\n    \"02n\": classes.cloudynight,\n    \"03n\": classes.cloudynight,\n    \"04n\": classes.cloudynight,\n    \"09n\": classes.rainynight,\n    \"10n\": classes.rainynight,\n    \"11n\": classes.stormynight,\n    \"13n\": classes.snowynight,\n    \"50n\": classes.foggynight,\n}\nfunction App() {\n    const [currentWeather, setCurrentWeather] = useState(null);\n    const [forecast, setForecast] = useState(null);\n    const [status, setStatus] = useState(false);\n    const [latitude, setLatitude] = useState(null);\n    const [longitude, setLongitude] = useState(null);\n    const [stats, setStats] = useState(null);\n    const [checkLocation, setCheckLocation] = useState(false);\n    const getLocation = () => {\n        if (!navigator.geolocation) {\n            setStats(\"Geolocation is not supported by your browser\");\n        } else {\n            setStats(\"Locating...\");\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    setStats(null);\n                    setLatitude(position.coords.latitude);\n                    setLongitude(position.coords.longitude);\n                    console.log(\"Finished Fetching your Location\");\n                    setCheckLocation(true);\n                },\n                () => {\n                    setStats(\"unnable to retrieve your location\");\n                }\n            );\n        }\n    };\n\n    const firstChange = () => {\n        if (latitude === null || longitude === null) {\n            return;\n        }\n\n        setStatus(true);\n        const currentWeatherFetch = fetch(\n            `${WEATHER_API_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`\n        );\n        const forcastFetch = fetch(\n            `${WEATHER_API_URL}/forecast?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`\n        );\n\n        Promise.all([currentWeatherFetch, forcastFetch])\n            .then(async (response) => {\n                const weatherResponse = await response[0].json();\n                const forcastResponse = await response[1].json();\n\n                setCurrentWeather({city: \"Your Location\", ...weatherResponse});\n                setForecast({city: \"Your Location\", ...forcastResponse});\n            })\n            .catch((err) => console.log(err));\n    };\n\n    const searchChangeHandler = (searchData) => {\n        const [lat, lon] = searchData.value.split(\" \");\n\n\n        setStatus(true);\n        const currentWeatherFetch = fetch(\n            `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n        );\n        const forcastFetch = fetch(\n            `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n        );\n\n        Promise.all([currentWeatherFetch, forcastFetch])\n            .then(async (response) => {\n                const weatherResponse = await response[0].json();\n                const forcastResponse = await response[1].json();\n\n                setCurrentWeather({city: searchData.label, ...weatherResponse});\n                setForecast({city: searchData.label, ...forcastResponse});\n            })\n            .catch((err) => console.log(err));\n\n    };\n    console.log(currentWeather)\n\n    let background = classes.defaultBackground;\n\n\n    if (currentWeather !== null) {\n        let weatherIcon = currentWeather.weather[0].icon;\n        background = backgrounds[weatherIcon];\n    }\n\n    useEffect(() => {\n        if (currentWeather != null && forecast != null) {\n            setStatus(false);\n        }\n    }, [currentWeather, forecast]);\n    useEffect(() => {\n        getLocation();\n    }, []);\n\n\n    useEffect(() => {\n        firstChange();\n    }, [checkLocation]);\n\n    return (\n        <React.Fragment>\n            <div>\n                <img className={background}></img>\n            </div>\n            <div className={classes.container}>\n                <div className=\"overlay\"/>\n                <Search onSearchChange={searchChangeHandler}/>\n                {status && (\n                    <div className=\"centered\">\n                        <LoadingSpinner/>\n                    </div>\n                )}\n                {!status && currentWeather && <CurrentWeather props={currentWeather}/>}\n                {!status && forecast && <Forecast props={forecast}/>}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\Api.js",[],"C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\UI\\LoadingSpinner.js",[],"C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\search\\Search.js",["39"],"import { useState, useEffect } from \"react\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport classes from \"./Search.module.css\";\r\nimport { GEO_API_URL, geoApiOptions } from \"../../Api\";\r\n\r\nconst Search = (props) => {\r\n  const [search, setSearch] = useState(null);\r\n\r\n\r\n  const loadOptions = (inputValue) => {\r\n    return fetch(\r\n      `${GEO_API_URL}/cities?minPopulation=10000  &namePrefix=${inputValue}`,\r\n      geoApiOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        return {\r\n          options: response.data.map((city) => {\r\n            return {\r\n              value: `${city.latitude} ${city.longitude}`,\r\n              label: `${city.name}, ${city.countryCode}`,\r\n            };\r\n          }),\r\n        };\r\n      })\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n\r\n  const onChangeHandler = (event) => {\r\n    setSearch(event);\r\n    props.onSearchChange(event);\r\n  };\r\n  return (<div>\r\n    \r\n    <AsyncPaginate\r\n      placeholder=\"Search for City\"\r\n      debounceTimeout={600}\r\n      value={search}\r\n      onChange={onChangeHandler}\r\n      loadOptions={loadOptions}\r\n      className={classes.searchbar}\r\n    />\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n","C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\forecast\\Forecast.js",[],"C:\\Users\\corss\\React\\React - IKFRAM - eindapp\\01-starting-setup\\src\\components\\current-weather\\Current-weather.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":5,"column":37,"nodeType":"46","messageId":"47","endLine":5,"endColumn":47},{"ruleId":"44","severity":1,"message":"48","line":35,"column":12,"nodeType":"46","messageId":"47","endLine":35,"endColumn":17},{"ruleId":"49","severity":1,"message":"50","line":126,"column":8,"nodeType":"51","endLine":126,"endColumn":23,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":131,"column":17,"nodeType":"55","endLine":131,"endColumn":45},{"ruleId":"44","severity":1,"message":"56","line":1,"column":20,"nodeType":"46","messageId":"47","endLine":1,"endColumn":29},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'stats' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'firstChange'. Either include it or remove the dependency array.","ArrayExpression",["59"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [checkLocation, firstChange]",{"range":"62","text":"63"},[4395,4410],"[checkLocation, firstChange]"]