{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\corss\\\\OneDrive\\\\Bureaublad\\\\School\\\\React\\\\React - IKFRAM - eindapp\\\\01-starting-setup\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Search from \"./components/search/Search\";\nimport CurrentWeather from \"./components/current-weather/Current-weather\";\nimport classes from \"./App.module.css\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./Api\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Forecast from \"./components/forecast/Forecast\";\nimport LoadingSpinner from \"./components/UI/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [status, setStatus] = useState(false);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [stats, setStats] = useState(null);\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStats(\"Geolocation is not supported by your browser\");\n    } else {\n      setStats(\"Locating...\");\n      navigator.geolocation.getCurrentPosition(position => {\n        setStats(null);\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n      }, () => {\n        setStats(\"unnable to retrieve your location\");\n      });\n    }\n  };\n  useEffect(() => {\n    getLocation();\n    const firstReload = () => {\n      console.log(\"HIII\");\n      console.log(latitude + \"hi\");\n      setStatus(true);\n      const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\n      const forcastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\n      Promise.all([currentWeatherFetch, forcastFetch]).then(async response => {\n        const weatherResponse = await response[0].json();\n        const forcastResponse = await response[1].json();\n        setCurrentWeather({\n          city: weatherResponse\n        });\n        setForecast({\n          city: forcastResponse\n        });\n      }).catch(err => console.log(err));\n    };\n  }, []);\n  const searchChangeHandler = searchData => {\n    console.log(\"HIII\");\n    const [lat, lon] = searchData.value.split(\" \");\n    setLatitude(lat);\n    setLongitude(lon);\n    console.log(latitude + \"hi\");\n    setStatus(true);\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\n    const forcastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\n    Promise.all([currentWeatherFetch, forcastFetch]).then(async response => {\n      const weatherResponse = await response[0].json();\n      const forcastResponse = await response[1].json();\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forcastResponse\n      });\n    }).catch(err => console.log(err));\n  };\n  let background = classes.defaultBackground;\n  if (currentWeather !== null) {\n    let weatherIcon = currentWeather.weather[0].icon;\n    if (weatherIcon === \"01d\" || weatherIcon === \"02d\") {\n      background = classes.sunnyday;\n    } else if (weatherIcon === \"03d\" || weatherIcon === \"04d\") {\n      background = classes.cloudyday;\n    } else if (weatherIcon === \"09d\" || weatherIcon === \"10d\") {\n      background = classes.rainyday;\n    } else if (weatherIcon === \"11d\") {\n      background = classes.stormyday;\n    } else if (weatherIcon === \"13d\") {\n      background = classes.snowyday;\n    } else if (weatherIcon === \"50d\") {\n      background = classes.foggyday;\n    } else if (weatherIcon === \"01n\") {\n      background = classes.cloudlessnight;\n    } else if (weatherIcon === \"02n\" || weatherIcon === \"03n\" || weatherIcon === \"04n\") {\n      background = classes.cloudynight;\n    } else if (weatherIcon === \"09n\" || weatherIcon === \"10n\") {\n      background = classes.rainynight;\n    } else if (weatherIcon === \"11n\") {\n      background = classes.stormynight;\n    } else if (weatherIcon === \"13n\") {\n      background = classes.snowynight;\n    } else if (weatherIcon === \"50n\") {\n      background = classes.foggynight;\n    }\n  }\n  useEffect(() => {\n    if (currentWeather != null && forecast != null) {\n      setStatus(false);\n    }\n  }, [currentWeather, forecast]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: background\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Search, {\n        onSearchChange: searchChangeHandler,\n        props: {\n          latitude: latitude,\n          longitude: longitude\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), !status && currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n        props: currentWeather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 39\n      }, this), !status && forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n        props: forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3WBChExxqNomYT7DIecagulaW2w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Search","CurrentWeather","classes","WEATHER_API_URL","WEATHER_API_KEY","React","useState","useEffect","useContext","Forecast","LoadingSpinner","App","currentWeather","setCurrentWeather","forecast","setForecast","status","setStatus","latitude","setLatitude","longitude","setLongitude","stats","setStats","getLocation","navigator","geolocation","getCurrentPosition","position","coords","firstReload","console","log","currentWeatherFetch","fetch","forcastFetch","Promise","all","then","response","weatherResponse","json","forcastResponse","city","catch","err","searchChangeHandler","searchData","lat","lon","value","split","label","background","defaultBackground","weatherIcon","weather","icon","sunnyday","cloudyday","rainyday","stormyday","snowyday","foggyday","cloudlessnight","cloudynight","rainynight","stormynight","snowynight","foggynight","container"],"sources":["C:/Users/corss/OneDrive/Bureaublad/School/React/React - IKFRAM - eindapp/01-starting-setup/src/App.js"],"sourcesContent":["import Search from \"./components/search/Search\";\nimport CurrentWeather from \"./components/current-weather/Current-weather\";\nimport classes from \"./App.module.css\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./Api\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Forecast from \"./components/forecast/Forecast\";\nimport LoadingSpinner from \"./components/UI/LoadingSpinner\";\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [status, setStatus] = useState(false);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [stats, setStats] = useState(null);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStats(\"Geolocation is not supported by your browser\");\n    } else {\n      setStats(\"Locating...\");\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setStats(null);\n          setLatitude(position.coords.latitude);\n          setLongitude(position.coords.longitude);\n        },\n        () => {\n          setStats(\"unnable to retrieve your location\");\n        }\n      );\n    }\n  };\n  useEffect(() => {\n    getLocation();\n\n    const firstReload = () => {\n      console.log(\"HIII\");\n      console.log(latitude + \"hi\")\n  \n      setStatus(true);\n      const currentWeatherFetch = fetch(\n        `${WEATHER_API_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`\n      );\n      const forcastFetch = fetch(\n        `${WEATHER_API_URL}/forecast?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`\n      );\n  \n      Promise.all([currentWeatherFetch, forcastFetch])\n        .then(async (response) => {\n          const weatherResponse = await response[0].json();\n          const forcastResponse = await response[1].json();\n  \n          setCurrentWeather({ city: weatherResponse });\n          setForecast({ city: forcastResponse });\n        })\n        .catch((err) => console.log(err));\n    };\n\n\n  }, []);\n\n\n  const searchChangeHandler = (searchData) => {\n    console.log(\"HIII\");\n    const [lat, lon] = searchData.value.split(\" \");\n    setLatitude(lat);\n    setLongitude(lon);\n    console.log(latitude + \"hi\")\n\n    setStatus(true);\n    const currentWeatherFetch = fetch(\n      `${WEATHER_API_URL}/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n    const forcastFetch = fetch(\n      `${WEATHER_API_URL}/forecast?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n\n    Promise.all([currentWeatherFetch, forcastFetch])\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forcastResponse = await response[1].json();\n\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\n        setForecast({ city: searchData.label, ...forcastResponse });\n      })\n      .catch((err) => console.log(err));\n  };\n  let background = classes.defaultBackground;\n  if (currentWeather !== null) {\n    let weatherIcon = currentWeather.weather[0].icon;\n    if (weatherIcon === \"01d\" || weatherIcon === \"02d\") {\n      background = classes.sunnyday;\n    } else if (weatherIcon === \"03d\" || weatherIcon === \"04d\") {\n      background = classes.cloudyday;\n    } else if (weatherIcon === \"09d\" || weatherIcon === \"10d\") {\n      background = classes.rainyday;\n    } else if (weatherIcon === \"11d\") {\n      background = classes.stormyday;\n    } else if (weatherIcon === \"13d\") {\n      background = classes.snowyday;\n    } else if (weatherIcon === \"50d\") {\n      background = classes.foggyday;\n    } else if (weatherIcon === \"01n\") {\n      background = classes.cloudlessnight;\n    } else if (\n      weatherIcon === \"02n\" ||\n      weatherIcon === \"03n\" ||\n      weatherIcon === \"04n\"\n    ) {\n      background = classes.cloudynight;\n    } else if (weatherIcon === \"09n\" || weatherIcon === \"10n\") {\n      background = classes.rainynight;\n    } else if (weatherIcon === \"11n\") {\n      background = classes.stormynight;\n    } else if (weatherIcon === \"13n\") {\n      background = classes.snowynight;\n    } else if (weatherIcon === \"50n\") {\n      background = classes.foggynight;\n    }\n  }\n  useEffect(() => {\n    if (currentWeather != null && forecast != null) {\n      setStatus(false);\n    }\n  }, [currentWeather, forecast]);\n\n  return (\n    <React.Fragment>\n      <div>\n        <img className={background}></img>\n      </div>\n      <div className={classes.container}>\n        <div className=\"overlay\" />\n        <Search\n          onSearchChange={searchChangeHandler}\n          props={{ latitude: latitude, longitude: longitude }}\n        />\n        {status && (\n          <div className=\"centered\">\n            <LoadingSpinner />\n          </div>\n        )}\n        {!status && currentWeather && <CurrentWeather props={currentWeather} />}\n        {!status && forecast && <Forecast props={forecast} />}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}